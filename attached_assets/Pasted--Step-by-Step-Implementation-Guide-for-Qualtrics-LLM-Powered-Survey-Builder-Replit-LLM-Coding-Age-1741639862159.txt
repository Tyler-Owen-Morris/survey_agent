## Step-by-Step Implementation Guide for Qualtrics LLM-Powered Survey Builder (Replit LLM Coding Agent Version)

### **1. Project Initialization & Setup**
- **Initialize Next.js Project (TypeScript)**:
  - Use the command:
    ```bash
    npx create-next-app@latest qualtrics-survey-builder --typescript
    ```
- Install essential dependencies explicitly:
  ```bash
  npm install next-auth @next-auth/prisma-adapter @stripe/stripe-js @stripe/react-stripe-js stripe upstash-redis axios openai
  ```

### **2. User Authentication & Account Management**
- Configure NextAuth.js explicitly for OAuth (Google, GitHub) and email/password authentication.
- Set up Prisma for secure storage of user data, including encrypted fields for storing Qualtrics credentials (`API Token`, `Datacenter`, `Brand ID`).
- Implement backend API endpoint to verify Qualtrics credentials via `/whoami` Qualtrics API call before storing.
- Front-end should proactively notify users clearly if Qualtrics credentials are missing during survey creation initiation.

### **3. User Interface & Experience**
- Develop a single-page application using Next.js with a dedicated chat interface:
  - Implement with a suitable chat UI component (e.g., `react-chat-ui` or a similar library).
  - Use React state management via Zustand for conversational state.
  - Implement dynamic real-time rendering of structured survey outlines ("current version") clearly within the chat interface.

- Implement a separate User Dashboard for:
  - Profile viewing and editing.
  - Subscription and billing management.
  - Display of real-time token balances (subscription-based vs. ad-hoc tokens).

### **4. LLM Integration**
- Integrate OpenAI API through clearly-defined Next.js API routes.
  - Manage token consumption by tracking user input and AI response tokens.
- Implement explicit middleware in Next.js backend to handle token count deductions and balance updates.
- Maintain conversational state using Upstash Redis (store temporary chat histories and conversation context).

### **5. Qualtrics API Integration**
- POST structured JSON payloads generated by the LLM as instructions for a separate backend script. This script will iteratively handle API interactions with Qualtrics, including sequential calls that depend on IDs from previous responses (e.g., using a survey ID obtained from creating a survey to subsequently create blocks and questions).
  - Implement detailed error handling for Qualtrics API responses, clearly logging errors and alerting users.

### **6. Billing & Token Management (Stripe Integration)**
- Explicit Stripe integration for subscription and ad-hoc payments:
  - Define clear subscription tiers with monthly-expiring token allocations.
  - Implement ad-hoc token packages clearly marked as non-expiring.
- Configure Stripe webhooks explicitly:
  - Handle real-time subscription status updates and token balance management.
- Clearly display subscription/token details and payment options in the user dashboard.

### **7. GDPR Compliance & Security**
- Explicit GDPR-compliant practices:
  - Implement secure encryption for sensitive data storage.
  - User-consent workflows clearly integrated into signup.
  - Explicitly provide options for data export and deletion.

### **8. Analytics and Monitoring**
- Integrate internal analytics:
  - Track user interactions, token usage, and overall application engagement.
  - Implement clear monitoring/logging infrastructure for backend services and user actions.

### **9. Testing & Quality Assurance**
- Explicitly define unit and integration tests:
  - Authentication and credential storage functionalities.
  - Accuracy of LLM-generated survey payloads.
  - Stripe billing processes, webhook handling, and token balance accuracy.

- Implement explicit end-to-end (E2E) testing flows for conversational interactions, payment, and user management interfaces.

### **10. Documentation & Code Clarity**
- Provide inline documentation clearly in the codebase, using TypeScript interfaces/types.
- Prepare a comprehensive README explicitly outlining application architecture, API endpoints, key functionalities, and usage guidelines for onboarding future developers.

